


## **1Ô∏è‚É£ Case Study on Python Programming Fundamentals**

### ‚ùì Question

Write programs using variables, string operations, conditions, loops, and functions.

### ‚úÖ Answer

```python
# Variables & Expressions
a, b = 10, 3
print("Sum:", a+b, "Power:", a**b)

# String Operations
s = "Python Lab"
print(s.upper(), s[::-1])   # uppercase + reverse

# Conditions & Loop
for i in range(1, 6):
    if i % 2 == 0:
        print(i, "is Even")
    else:
        print(i, "is Odd")

# Function
def factorial(n):
    fact = 1
    for i in range(1, n+1):
        fact *= i
    return fact

print("Factorial of 5:", factorial(5))
```

---

## **2Ô∏è‚É£ Case Study on Python Data Structures**

### ‚ùì Question

Demonstrate operations on Lists, Tuples, Sets, and Dictionaries.

### ‚úÖ Answer

```python
# List
lst = [1, 2, 3]
lst.append(4)
print("List:", lst)

# Tuple
t = (10, 20, 30)
print("Tuple Indexing:", t[1])

# Set
s = {1, 2, 2, 3}
s.add(4)
print("Set:", s)

# Dictionary
d = {"name": "Shifa", "age": 21}
d["city"] = "Mumbai"
print("Dictionary:", d)
```

---

## **3Ô∏è‚É£ Case Study on NumPy Library**

### ‚ùì Question

Create NumPy arrays and perform mathematical operations.

### ‚úÖ Answer

```python
import numpy as np

arr = np.array([1, 2, 3, 4])
print("Array:", arr)
print("Mean:", arr.mean())
print("Squared:", arr**2)

# 2D Array
mat = np.array([[1,2],[3,4]])
print("Matrix:\n", mat)
print("Transpose:\n", mat.T)
```

---

## **4Ô∏è‚É£ Case Study on Pandas Library**

### ‚ùì Question

Perform DataFrame creation, indexing, slicing, aggregation, and merging.

### ‚úÖ Answer

```python
import pandas as pd

# DataFrame
data = {"Name":["A","B","C"], "Marks":[85,90,78]}
df = pd.DataFrame(data)
print(df)

# Indexing & Slicing
print("First Row:\n", df.iloc[0])

# GroupBy & Aggregate
df2 = pd.DataFrame({"Class":["X","X","Y"], "Score":[90,80,70]})
print(df2.groupby("Class").mean())

# Merging
merged = pd.merge(df, df2, left_index=True, right_index=True)
print("Merged DF:\n", merged)
```

---

## **5Ô∏è‚É£ Data Visualization ‚Äì Univariate**

### ‚ùì Question

Plot histograms and countplots.

### ‚úÖ Answer

```python
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

data = np.random.randn(100)

plt.hist(data, bins=10, color="skyblue")
plt.title("Histogram")
plt.show()

sns.boxplot(data=data)
plt.title("Boxplot")
plt.show()
```

---

## **6Ô∏è‚É£ Data Visualization ‚Äì Bivariate & Multivariate**

### ‚ùì Question

Plot scatter and pair plots.

### ‚úÖ Answer

```python
import seaborn as sns
import pandas as pd

df = sns.load_dataset("iris")

# Scatter Plot
sns.scatterplot(x="sepal_length", y="petal_length", hue="species", data=df)

# Pair Plot (Multivariate)
sns.pairplot(df, hue="species")
```

---

## **7Ô∏è‚É£ Exploratory Data Analysis (EDA) ‚Äì Cleaning**

### ‚ùì Question

Handle missing values and show feature engineering.

### ‚úÖ Answer

```python
import pandas as pd
import numpy as np

df = pd.DataFrame({
    "A":[1,2,np.nan,4],
    "B":[5,np.nan,7,8]
})

print("Before:\n", df)

# Impute missing values
df["A"].fillna(df["A"].mean(), inplace=True)
df["B"].fillna(method="ffill", inplace=True)

# Feature Engineering
df["C"] = df["A"] * df["B"]

print("After Cleaning:\n", df)
```

---

## **8Ô∏è‚É£ Exploratory Data Analysis ‚Äì Outliers & Scaling**

### ‚ùì Question

Detect outliers and normalize data.

### ‚úÖ Answer

```python
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler

df = pd.DataFrame({"Marks":[20,22,23,100,24,25]})
print("Original:\n", df)

# Detect outliers (Z-score)
z = (df["Marks"] - df["Marks"].mean()) / df["Marks"].std()
print("Z-scores:\n", z)

# Standardize
scaler = StandardScaler()
df["Scaled"] = scaler.fit_transform(df[["Marks"]])
print("After Scaling:\n", df)
```

---

## **9Ô∏è‚É£ Case Study on Linear Regression**

### ‚ùì Question

Perform simple and multiple linear regression.

### ‚úÖ Answer

```python
import pandas as pd
from sklearn.linear_model import LinearRegression

# Simple Linear Regression
X = [[1],[2],[3],[4]]
y = [2,4,6,8]

model = LinearRegression()
model.fit(X, y)
print("Prediction for 5:", model.predict([[5]]))

# Multiple Linear Regression
X2 = [[1,2],[2,3],[3,4],[4,5]]
y2 = [5,7,9,11]

model2 = LinearRegression()
model2.fit(X2, y2)
print("Prediction:", model2.predict([[5,6]]))
```

---

## **üîü Case Study on Logistic Regression**

### ‚ùì Question

Perform binary classification using Logistic Regression.

### ‚úÖ Answer

```python
from sklearn.linear_model import LogisticRegression

# Training Data
X = [[1],[2],[3],[4],[5],[6]]
y = [0,0,0,1,1,1]   # Binary labels

model = LogisticRegression()
model.fit(X, y)

print("Prediction for 2.5:", model.predict([[2.5]]))
print("Prediction for 5.5:", model.predict([[5.5]]))
```

